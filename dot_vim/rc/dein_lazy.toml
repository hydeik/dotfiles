# === Plugins (lazy loading) ===

#==============================================================================
# Language server protocol client
#==============================================================================
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['async.vim', 'vim-lsp-settings']
on_ft = [
  'c', 'cpp', 'dockerfile', 'fortran', 'json', 'javascript', 'go', 'lua',
  'python', 'ruby', 'rust', 'sh', 'tex', 'typescript', 'vim', 'yaml'
  ]

hook_source = '''
  " Options
  let g:lsp_signs_error       = { 'text': "\uf00d" }
  let g:lsp_signs_warning     = { 'text': "\uf071" }
  let g:lsp_signs_hint        = { 'text': "\uf27b" }
  let g:lsp_signs_information = { 'text': "\uf05a" }

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_highlight_references_enabled = 1
  let g:lsp_text_edit_enabled = 1
  let g:lsp_log_file = $VIM_CACHE_HOME . '/vim-lsp.log'
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = ['vim-lsp']

hook_add = '''
  " if IsMac()
  "   let g:lsp_settings = {
  "         \ 'clangd': {'cmd': ['/usr/local/opt/llvm/bin/clangd']}
  "         \ }
  " endif
'''

hook_source = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    nmap <buffer> mA  <Plug>(lsp-codeaction)
    nmap <buffer> md  <Plug>(lsp-definition)
    nmap <buffer> mD  <Plug>(lsp-declaration)
    nmap <buffer> mh  <Plug>(lsp-hover)
    nmap <buffer> mf  <Plug>(lsp-document-format)
    nmap <buffer> mi  <Plug>(lsp-implementation)
    nmap <buffer> mr  <Plug>(lsp-references)
    nmap <buffer> mR  <Plug>(lsp-rename)
    nmap <buffer> ms  <Plug>(lsp-document-symbol)
    nmap <buffer> mS  <Plug>(lsp-workspace-symbol)
    " nmap <buffer> ms  :<C-u>Denite -buffer-name=lsp lsp_document_symbol<CR>
    " nmap <buffer> mS  :<C-u>Denite -buffer-name=lsp lsp_workspace_symbol<CR>
    nmap <buffer> mt  <Plug>(lsp-type-definition)
    nmap <buffer> m?  <Plug>(lsp-document-diagnostics)
    nmap <buffer> m]  <Plug>(lsp-next-error)
    nmap <buffer> m[  <Plug>(lsp-previous-error)
  endfunction

  augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
'''

#==============================================================================
# Auto completion
#==============================================================================

# Vim source for neocomplete/deoplete
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/neco-syntax'
on_event = 'InsertEnter'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['asyncomplete.vim', 'vim-lsp']
on_source = ['vim-lsp']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necovim.vim'
depends = ['asyncomplete.vim', 'neco-vim']
on_source = ['neco-vim']
hook_source = '''
  autocmd MyAutoCmd User asyncomplete_setup
        \ call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
        \ 'name': 'necovim',
        \ 'priority': 30,
        \ 'whitelist': ['vim'],
        \ 'completor': function('asyncomplete#sources#necovim#completor'),
        \ }))
'''


[[plugins]]
repo = 'prabirshrestha/asyncomplete-necosyntax.vim'
depends = ['asyncomplete.vim', 'neco-syntax']
on_source = ['neco-syntax']
hook_source = '''
  autocmd MyAutoCmd User asyncomplete_setup
        \ call asyncomplete#register_source(asyncomplete#sources#necosyntax#get_source_options({
        \  'name': 'necosyntax',
        \  'whitelist': ['*'],
        \  'completor': function('asyncomplete#sources#necosyntax#completor'),
        \ }))
'''


# VSCode(LSP)'s snippet feature in vim.
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertCharPre'
hook_add = '''
  if dein#tap('neosnippet.vim')
    imap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' :
          \ neosnippet#expandable_or_jumpable() ? : '<Plug>(neosnippet_jump_or_expand)' ? '<C-n>'
    smap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' :
          \ neosnippet#expandable_or_jumpable() ? : '<Plug>(neosnippet_jump_or_expand)' ? '<C-n>'
  else
    imap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-n>'
    smap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-n>'
  endif
'''


# vim-snip integrations to LSP clients and deoplete/asyncomplete
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = ['vim-vsnip']

# Snippet
# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_add = '''
#   imap <silent><C-s>   <Plug>(neosnippet_jump_or_expand)
#   smap <silent><C-s>   <Plug>(neosnippet_jump_or_expand)
#   xmap <silent><C-s>   <Plug>(neosnippet_expand_target)
# '''
# hook_source = '''
#   let g:neosnippet#enable_snipmate_compatibility = 1
#   let g:neosnippet#enable_completed_snippet = 1
#   " let g:neosnippet#enable_complete_done = 1
#   let g:neosnippet#expand_word_boundary = 1
#   let g:neosnippet#snippets_directory = $VIM_CONFIG_HOME . '/snippets'
# '''

# Auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertCharPre'
hook_source = '''
  let g:lexima_ctrlh_as_backspace = 1
'''
hook_post_source = '''
  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
  call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

# Auto create TAG files
[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
if = "executable('ctags')"
on_path = '.*'
hook_add = '''
  let g:gutentags_cache_dir = $VIM_CACHE_HOME . '/tags'
  let g:gutentags_generate_on_missing = 0
  let g:gutentags_generate_on_new = 0
  let g:gutentags_generate_on_save = 1
  let g:gutentags_exclude_filetype = []
  let g:gutentags_ctags_exclude_wildignore = 1
  let g:gutentags_ctags_exclude = [
        \ '*/build', '*/wp-admin', '*/wp-content', '*/wp-includes',
        \ '*/application/vendor', '*/vendor/ckeditor', '*/media/vendor'
        \ ]
'''

# # VSCode(LSP)'s snippet feature in vim.
# [[plugins]]
# repo = 'hrsh7th/vim-vsnip'
# on_event = 'InsertCharPre'
# hook_add = '''
#   if dein#tap('neosnippet.vim')
#     imap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' :
#           \ neosnippet#expandable_or_jumpable() ? : '<Plug>(neosnippet_jump_or_expand)' ? '<C-n>'
#     smap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' :
#           \ neosnippet#expandable_or_jumpable() ? : '<Plug>(neosnippet_jump_or_expand)' ? '<C-n>'
#   else
#     imap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-n>'
#     smap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-n>'
#   endif
# '''
#
#
# # vim-snip integrations to LSP clients and deoplete/asyncomplete
# [[plugins]]
# repo = 'hrsh7th/vim-vsnip-integ'
# on_source = ['vim-vsnip']


# #==============================================================================
# # Fuzzy finder
# #==============================================================================
# [[plugins]]
# repo = 'liuchengxu/vim-clap'
# depends = ['vista.vim']
# on_cmd = ['Clap']
# hook_post_update = ':Clap install-binary'
#
# hook_add = '''
#   nnoremap <silent> <Space>/   :<C-u>Clap blines<CR>
#   nnoremap <silent> <Space>b   :<C-u>Clap buffers<CR>
#   nnoremap <silent> <Space>;   :<C-u>Clap command<CR>
#   nnoremap <silent> <Space>:   :<C-u>Clap command_history<CR>
#   nnoremap <silent> <Space>ff  :<C-u>Clap files<CR>
#   nnoremap <silent> <Space>ft  :<C-u>Clap filetypes<CR>
#   nnoremap <silent> <Space>G   :<C-u>Clap grep<CR>
#   nnoremap <silent> <Space>y   :<C-u>Clap yanks<CR>
# '''


#==============================================================================
# Commands
#==============================================================================

# Utility commands for dein.vim
[[plugins]]
repo = 'haya14busa/dein-command.vim'
depends = ['dein.vim']
on_cmd = ['Dein']

# # View and search LSP symbols and tags in Vim/NeoVim
# [[plugins]]
# repo = 'liuchengxu/vista.vim'
# on_cmd = ['Vista', 'Vista!', 'Vista!!']
# hook_add = '''
#   " toggle vista view window
#   nnoremap <silent> <Space>v  :<C-u>Vista!!<CR>
#
#   let g:vista_default_executive = 'ctags'
#   if has('nvim-0.5')
#     let g:vista_executive_for = {
#           \ 'c':          'nvim_lsp',
#           \ 'cpp':        'nvim_lsp',
#           \ 'css':        'nvim_lsp',
#           \ 'dockerfile': 'nvim_lsp',
#           \ 'fortran':    'nvim_lsp',
#           \ 'go':         'nvim_lsp',
#           \ 'lua':        'nvim_lsp',
#           \ 'javascript': 'nvim_lsp',
#           \ 'python':     'nvim_lsp',
#           \ 'ruby':       'nvim_lsp',
#           \ 'rust':       'nvim_lsp',
#           \ 'sh':         'nvim_lsp',
#           \ 'tex':        'nvim_lsp',
#           \ 'typescript': 'nvim_lsp',
#           \ 'vim':        'nvim_lsp',
#           \ }
#   endif
# '''

# Perform the replacement in |quickfix|
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> R :<C-u>Qfreplace<CR>
'''

# Navigate windows like tmux's 'display-pane'
[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>(choosewin)'}
hook_add = '''
  nmap -  <Plug>(choosewin)
'''

# --- Smart Align
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign', 'LiveEasyAlign']
on_map = ['nv', '<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
hook_add = '''
  nmap <silent><Leader>a  <Plug>(EasyAlign)
  vmap <silent><Leader>a  <Plug>(EasyAlign)
'''

# --- Switch between single-line and multiline forms of code
[[plugins]]
# use default mapping
#   gS -> SplitjoinSplit
#   gJ -> SplitjoinJoin
repo = 'AndrewRadev/splitjoin.vim'
on_map = {n = '<Plug>Splitjoin'}

# Delete buffer without closing window
[[plugins]]
repo = 'rbgrouleff/bclose.vim'
on_cmd = ['Bclose']
hook_add = '''
  let g:bclose_no_plugins_maps = 1
  nnoremap <silent> sx  :<C-u>Bclose<CR>
'''

# REPLs play nicely with :terminal on Vim and Neovim
repo = 'rhysd/reply.vim'
on_cmd = ['Repl', 'ReplAuto']
# TODO: add custom repl for python

#==============================================================================
# Interfaces
#==============================================================================

# SKK imput method for Japanese
[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>(eskk'}
hook_add = '''
  imap <C-j>  <Plug>(eskk:toggle)
  cmap <C-j>  <Plug>(eskk:toggle)
'''
hook_source = '''
  let g:eskk#directory = expand('$VIM_CACHE_HOME/eskk')

  let g:eskk#dictionary = {
        \ 'path': expand('$VIM_CACHE_HOME/skk-jisyo'),
        \ 'sorted': 1,
        \ 'encoding': 'utf-8',
        \ }

  if IsMac()
    let g:eskk#large_dictionary = {
          \ 'path': '~/Library/Application\ Support/AquaSKK/SKK-JISYO.L',
          \ 'sorted': 1,
          \ 'encoding': 'euc-jp',
          \ }
  elseif IsWindows()
    let g:eskk#large_dictionary = {
          \ 'path': '~/SKK-JISYO.L',
          \ 'sorted': 1,
          \ 'encoding': 'euc-jp',
          \ }
  else
    let g:eskk#large_dictionary = {
          \ 'path': '/usr/local/share/skk/SKK-JISYO.L',
          \ 'sorted': 1,
          \ 'encoding': 'euc-jp',
          \ }
  endif

  let g:eskk#server = { 'host': 'localhost', 'port': 1178 }

  " --- Henkan, annotation
  let g:eskk#show_annotation = 1

  let g:eskk#keep_state = 0
  let g:eskk#debug = 0
  let g:eskk#show_annotation = 1
  let g:eskk#egg_like_newline = 1
  let g:eskk#egg_like_newline_completion = 1
  let g:eskk#tab_select_completion = 1
  let g:eskk#start_completion_length = 2

  " --- easy escape with 'jj'
  autocmd MyAutoCmd User eskk-initialize-post EskkMap -remap jj <ESC>
'''

# Smart commenter
[[plugins]]
repo = 'tyru/caw.vim'
depends = ['context_filetype.vim']
on_map = {nv = '<Plug>(caw'}
hook_add = '''
  let g:caw_no_default_keymappings = 1

  nmap gcc  <Plug>(caw:hatpos:toggle)
  xmap gcc  <Plug>(caw:hatpos:toggle)
  nmap gca  <Plug>(caw:dollarpos:toggle)
  xmap gca  <Plug>(caw:dollarpos:toggle)
  nmap gcb  <Plug>(caw:box:toggle)
  xmap gcb  <Plug>(caw:box:toggle)
  nmap gcw  <Plug>(caw:wrap:toggle)
  xmap gcw  <Plug>(caw:wrap:toggle)
  nmap gc]  <Plug>(caw:jump:comment-next)
  nmap gc[  <Plug>(caw:jump:comment-prev)
'''

# Make blockwise visual mode more useful
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {nx = '<Plug>(niceblock'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

# # Vim motions on speed!
# [[plugins]]
# repo = 'easymotion/vim-easymotion'
# on_map = {n = '<Plug>(easymotion'}
# hook_add = '''
#   " Search and jump
#   nmap sf <Plug>(easymotion-overwin-f)
#   nmap ss <Plug>(easymotion-overwin-f2)
#   vmap ss <Plug>(easymotion-s2)
#   omap ss <Plug>(easymotion-s2)
#
#   map  sh <Plug>(easymotion-linebackward)
#   map  sj <Plug>(easymotion-j)
#   map  sk <Plug>(easymotion-k)
#   map  sl <Plug>(easymotion-lineforward)
#
#   map  s/ <Plug>(easymotion-sn)
#   omap s/ <Plug>(easymotion-tn)
#   map  sn <Plug>(easymotion-next)
#   map  sp <Plug>(easymotion-prev)
#
#   " smart f & F (visual mode and operator mode)
#   nmap f <Plug>(easymotion-sl)
#   omap f <Plug>(easymotion-bd-fl)
#   xmap f <Plug>(easymotion-bd-fl)
#   omap F <Plug>(easymotion-Fl)
#   xmap F <Plug>(easymotion-Fl)
#   omap t <Plug>(easymotion-tl)
#   xmap t <Plug>(easymotion-tl)
#   omap T <Plug>(easymotion-Tl)
#   xmap T <Plug>(easymotion-Tl)
# '''
# hook_source = '''
#   " Disable default mappings
#   let g:EasyMotion_do_mapping = 0
#   " Do not shade
#   let g:EasyMotion_do_shade = 0
#   " Use uppercase target labels (and type as a lowercase)
#   let g:EasyMotion_use_upper = 1
#   " Characters used for target labels
#   let g:EasyMotion_keys = ';HKLYUIONM,WERTXCVBASDGJF'
#   " Smartcase ('v' matches both 'v' and 'V', while 'V' does only 'V')
#   let g:EasyMotion_smartcase = 1
#   " Smartsign ('1' matches both '1' and '!' -> not used)
#   let g:EasyMotion_use_smartsign_us = 0
#   " keep cursor column
#   let g:EasyMotion_startofline = 0
#   " Don't skip folded line
#   let g:EasyMotion_skipfoldedline = 0
#   " pseudo-migemo
#   let g:EasyMotion_use_migemo = 1
#   " Jump to first with enter & space
#   let g:EasyMotion_space_jump_first = 1
#   " Prompt
#   let g:EasyMotion_prompt = 'Search for {n} chars> '
# '''
#
# # Move to the edge!
# [[plugins]]
# repo = 'haya14busa/vim-edgemotion'
# on_map = {nv = '<Plug>(edgemotion'}
# hook_add = '''
#   map  gj  <Plug>(edgemotion-j)
#   map  gk  <Plug>(edgemotion-k)
#   xmap gj  <Plug>(edgemotion-j)
#   xmap gk  <Plug>(edgemotion-k)
# '''
#
# Accerlerate up-down moving!
[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

#  Extended J command
[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap J  <Plug>(jplus)
  vmap J  <Plug>(jplus)

  " Insert one or more characters when join
  nmap <Leader>J  <Plug>(jplus-input)
  vmap <Leader>J  <Plug>(jplus-input)
'''

# Fast folding
[[plugins]]
repo = 'Konfekt/FastFold'
on_event = 'BufEnter'
hook_add = '''
  " Global variables
  let g:fastfold_savehook = 1
  let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
  let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
  " Update folds
  nmap zuz      <Plug>(FastFoldUpdate)
  " Create a fold text object
  xnoremap iz  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zv[z<CR>
  xnoremap az  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zV[z<CR>
'''

# # Set the buffer filetype based on the code block
# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']
# on_event = 'BufEnter'

# # [DO]cument [GE]nerator
# [[plugins]]
# repo = 'kkoomen/vim-doge'
# on_event = 'BufEnter'
# hook_add = '''
#   " 'reST', 'numpy', or 'google'
#   let g:doge_doc_standard_python = 'numpy'
#   " Key mappings
#   let g:doge_mapping = '<Leader>d'
#   let g:doge_mapping_comment_jump_forward  = '<M-n>'
#   let g:doge_mapping_comment_jump_backward = '<M-p>'
# '''

# Add filetype glyphs (icons) to other plugins
[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_func = ['WebDevIconsGetFileTypeSymbol', 'WebDevIconsGetFileFormatSymbol']
on_source = ['denite.nvim']
hook_add = '''
  let g:webdevicons_enable_nerdtree = 0
  let g:webdevicons_enable_unite = 0
  let g:webdevicons_enable_denite = 1
  let g:webdevicons_enable_vimfiler = 0
  let g:webdevicons_enable_ctrlp = 0
  let g:webdevicons_enable_airline_tabline = 0
  let g:webdevicons_enable_airline_statusline = 0
  let g:webdevicons_enable_startify = 0
  "   U+E287
  let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = "\ue287"
'''

#==============================================================================
# Textobj/Operator extensions
#==============================================================================

[[plugins]]
repo = 'machakann/vim-sandwich'
#on_map = {nxo = '<Plug>'}
on_path = '.*'
hook_add = '''
	let g:sandwich_no_default_key_mappings = 1

  silent! nmap <unique><silent> sd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> sr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> sdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  silent! nmap <unique><silent> srb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)

  " operator
  silent! nmap <unique> sa <Plug>(operator-sandwich-add)
  silent! xmap <unique> sa <Plug>(operator-sandwich-add)
  silent! omap <unique> sa <Plug>(operator-sandwich-g@)

  silent! xmap <unique> sd <Plug>(operator-sandwich-delete)

  silent! xmap <unique> sr <Plug>(operator-sandwich-replace)

  " textobj
  silent! omap <unique> ib  <Plug>(textobj-sandwich-literal-query-i)
  silent! xmap <unique> ib  <Plug>(textobj-sandwich-literal-query-i)
  silent! omap <unique> ab  <Plug>(textobj-sandwich-literal-query-a)
  silent! xmap <unique> ab  <Plug>(textobj-sandwich-literal-query-a)

  silent! omap <unique> is  <Plug>(textobj-sandwich-query-i)
  silent! xmap <unique> is  <Plug>(textobj-sandwich-query-i)
  silent! omap <unique> as  <Plug>(textobj-sandwich-query-a)
  silent! xmap <unique> as  <Plug>(textobj-sandwich-query-a)

  silent! omap <unique> iss <Plug>(textobj-sandwich-auto-i)
  silent! xmap <unique> iss <Plug>(textobj-sandwich-auto-i)
  silent! omap <unique> ass <Plug>(textobj-sandwich-auto-a)
  silent! xmap <unique> ass <Plug>(textobj-sandwich-auto-a)
'''
hook_source = '''
  let g:textobj#sandwich#stimeoutlen = 100

  " Custom recipes
  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
  let g:sandwich#recipes += [{'buns' : ['「', '」']}]
  let g:sandwich#recipes += [{'buns' : ['【', '】']}]
  let g:sandwich#recipes += [{'buns' : ['（', '）']}]
  let g:sandwich#recipes += [{'buns' : ['『', '』']}]

  " \(, \) pair and \%(, \) pair in Vim script
  let g:sandwich#recipes += [
        \ {'buns' : ['\(', '\)'],  'filetype' : ['vim'], 'nesting' : 1},
        \ {'buns' : ['\%(', '\)'], 'filetype' : ['vim'], 'nesting' : 1},
        \ ]
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = {nx = '<Plug>'}
depends = ['vim-operator-user']
hook_add = '''
  nmap R <Plug>(operator-replace)
  xmap R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_line_no_default_key_mappings = 1
  omap al <Plug>(textobj-line-a)
  omap il <Plug>(textobj-line-i)
  xmap al <Plug>(textobj-line-a)
  xmap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_delimited_no_defautl_key_mappings = 1

  omap ad <Plug>(textobj-delimited-forward-a)
  omap id <Plug>(textobj-delimited-forward-i)
  xmap ad <Plug>(textobj-delimited-forward-a)
  xmap id <Plug>(textobj-delimited-forward-i)
'''

# --- Expand region
[[plugins]]
repo = 'terryma/vim-expand-region'
depends = ['vim-sandwich', 'vim-textobj-delimited']
on_map = {x = '<Plug>'}
hook_add = '''
  "ad: textobj-delimeted"
  "ib: sandwich"
  let g:expand_region_text_objects = {
        \ 'iw'  : 0,
        \ 'iW'  : 0,
        \ 'iu'  : 0,
        \ 'ad'  : 1,
        \ 'iss' : 1,
        \ 'il'  : 1,
        \ 'ip'  : 0,
        \ 'ie'  : 0,
        \ }

  xmap v  <Plug>(expand_region_expand)
  xmap V  <Plug>(expand_region_shrink)
'''

#==============================================================================
# VCS (Git)
#==============================================================================

# Git wrapper
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina', 'Gina!', 'Gina!!']
on_func = ['gina#']
hook_add = '''
  nnoremap <silent> <Space>gs  :<C-u>Gina status<CR>
  nnoremap <silent> <Space>gA  :<C-u>Gina changes HEAD<CR>
  nnoremap <silent> <Space>gc  :<C-u>Gina commit<CR>
  nnoremap <silent> <Space>gC  :<C-u>Gina commit --amend<CR>
  nnoremap <silent> <Space>gb  :<C-u>Gina branch -av<CR>
  nnoremap <silent> <Space>gt  :<C-u>Gina tag<CR>
  nnoremap <silent> <Space>gg  :<C-u>Gina grep<CR>
  nnoremap <silent> <Space>gq  :<C-u>Gina qrep<CR>
  nnoremap <silent> <Space>gd  :<C-u>Gina changes origin/HEAD...<CR>
  nnoremap <silent> <Space>gl  :<C-u>Gina log<CR>
  nnoremap <silent> <Space>gL  :<C-u>Gina log :%<CR>
  nnoremap <silent> <Space>gf  :<C-u>Gina ls<CR>
  nnoremap <silent> <Space>grs :<C-u>Gina show <C-r><C-w><CR>
  nnoremap <silent> <Space>grc :<C-u>Gina changes <C-r><C-w><CR>
'''
hook_post_source = '''
  call gina#custom#command#option('commit', '-v|--verbose')
  call gina#custom#command#option('/\%(status\|commit\)', '-u|--untracked-files')
  call gina#custom#command#option('status', '-b|--branch')
  call gina#custom#command#option('status', '-s|--short')
  call gina#custom#command#option('/\%(commit\|tag\)', '--restore')
  call gina#custom#command#option('show', '--show-signature')

  call gina#custom#action#alias('branch', 'track',  'checkout:track')
  call gina#custom#action#alias('branch', 'merge',  'commit:merge')
  call gina#custom#action#alias('branch', 'rebase', 'commit:rebase')
  call gina#custom#action#alias('/\%(blame\|log\|reflog\)', 'preview', 'topleft show:commit:preview')
  call gina#custom#action#alias('/\%(blame\|log\|reflog\)', 'changes', 'topleft changes:of:preview')

  call gina#custom#mapping#nmap('branch', 'g<CR>', '<Plug>(gina-commit-checkout-track)')
  call gina#custom#mapping#nmap('status', '<C-^>', ':<C-u>Gina commit<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('commit', '<C-^>', ':<C-u>Gina status<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('status', '<C-6>', ':<C-u>Gina commit<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('commit', '<C-6>', ':<C-u>Gina status<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap(
        \ '/\%(blame\|log\|reflog\)',
        \ 'p', ':<C-u>call gina#action#call(''preview'')<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('/\%(blame\|log\|reflog\)',
        \ 'c', ':<C-u>call gina#action#call(''changes'')<CR>', {'noremap': 1, 'silent': 1})

  call gina#custom#execute('/\%(ls\|log\|reflog\|grep\)', 'setlocal noautoread')
  call gina#custom#execute('/\%(status\|branch\|ls\|log\|reflog\|grep\)', 'setlocal cursorline')
'''

# Show a git diff in the gutter (sign column)
[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'BufEnter'
hook_add = '''
  let g:gitgutter_map_keys = 0

  nmap ]g  <Plug>(GitGutterNextHunk)
  nmap [g  <Plug>(GitGutterPrevHunk)
  nmap gs  <Plug>(GitGutterPreviewHunk)
'''

# More pleasant editing on commit messages
[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'
hook_source = '''
  let g:committia_min_window_width = 120
'''

# Reveal the commit messages under the cursor
[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = ['GitMessenger']
on_map = {n = '<Plug>(git-messenger'}
hook_add = '''
  let g:git_messenger_no_default_mappings = v:true
  nmap gm  <Plug>(git-messenger)
'''

#=============================================================================
# Filetypes, Syntax
#==============================================================================

# LaTeX
# [[plugins]]
# repo = 'lervag/vimtex'
# on_ft = 'tex'
# hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/vimtex.vim'

# # Python
# [[plugins]]
# repo = 'lambdalisue/vim-pyenv'
# on_ft = 'python'
#
# [[plugins]]
# repo = 'tmhedberg/SimpylFold'
# on_ft = 'python'

[[plugins]]
repo = 'raimon49/requirements.txt.vim'
on_ft = 'requirements'

# CSV
[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'

# Markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
  let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# Markdown live preview
[[plugins]]
repo = 'iamcco/markdown-preview.vim'
build = 'cd app && yarn install'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
hook_source = '''
  let g:mkdp_refresh_slow = 1
'''

# Hex editor
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''
