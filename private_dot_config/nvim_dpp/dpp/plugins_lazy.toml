##============================================================================
## Treesitter
##============================================================================

[[plugins]] # nvim-treesitter
# Nvim Treesitter configurations and abstraction layer
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufReadPre', 'BufNewFile']
hook_post_update = 'TSUpdate'
hooks_file = '$DPP_HOOKS_DIR/treesitter.lua'

[[plugins]] # nvim-treesitter-textobjects
# Syntax aware text-objects, select, move, swap, and peek support.
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = 'nvim-treesitter'

# Use treesitter to auto close and auto rename html tag.
[[plugins]] # nvim-ts-autotag
repo = 'windwp/nvim-ts-autotag'
on_event = ['BufReadPre', 'BufNewFile']
lua_source = '''
require("nvim-ts-autotag").setup {}
'''

##============================================================================
## LSP / Linter / Formatter
##============================================================================

[[plugins]] # mason.nvim
# Portable package manager for Neovim that runs everywhere Neovim runs.
# Easily install and manage LSP servers, DAP servers, linters, and formatters.
repo = 'williamboman/mason.nvim'
on_cmd = [
  'Mason',
  'MasonInstall',
  'MasonLog',
  'MasonUpdate',
  'MasonUninstall',
  'MasonUninstallAll',
]
on_lua = ['mason', 'mason-registry']
hook_post_update = 'MasonUpdate'
hooks_file = '$DPP_HOOKS_DIR/mason.lua'

[[plugins]] # mason-lspconfig.nvim
# Extension to mason.nvim that makes it easier to use lspconfig with
# mason.nvim.
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['mason.nvim']

[[plugins]] # nvim-lspconfig
# Quickstart configs for Nvim LSP
repo = 'neovim/nvim-lspconfig'
depends = ['mason.nvim', 'mason-lspconfig.nvim']
on_event = ['BufReadPre', 'BufNewFile']
hooks_file = '$DPP_HOOKS_DIR/nvim-lspconfig.lua'

[[plugins]] # efmls-config-nvim
# An unofficial collection of linters and formatters configured for
# efm-langserver for neovim.
repo = 'creativenull/efmls-configs-nvim'
on_source = 'nvim-lspconfig'

[[plugins]] # lazydev.nvim
# Faster LuaLS setup for Neovim
repo = 'folke/lazydev.nvim'
on_ft = ['lua']

[[plugins]] # luvit-meta
# Meta type definitions for the Lua platform Luvit.
repo = 'Bilal2453/luvit-meta'
on_source = 'lazydev.nvim'
hooks_file = '$DPP_HOOKS_DIR/lazydev.lua'

[[plugins]] # inc-rename.nvim
# Incremental LSP renaming based on Neovim's command-preview feature.
repo = 'smjonas/inc-rename.nvim'
on_cmd = 'IncRename'
lua_source = 'require("inc_rename").setup()'

[[plugins]] # nvim-lint
# An asynchronous linter plugin for Neovim complementary to the built-in
# Language Server Protocol support.
repo = 'mfussenegger/nvim-lint'
depends = ['mason.nvim']
on_event = ['BufReadPre', 'BufNewFile']
hooks_file = '$DPP_HOOKS_DIR/nvim-lint.lua'

[[plugins]] # conform.nvim
# Lightweight yet powerful formatter plugin for Neovim
repo = 'stevearc/conform.nvim'
depends = ['mason.nvim']
on_cmd = 'ConformInfo'
on_event = 'BufWritePre'
on_lua = 'conform'
hooks_file = '$DPP_HOOKS_DIR/conform.lua'

[[plugins]] # SchemaStore.nvim
# JSON schemas for Neovim
repo = 'b0o/SchemaStore.nvim'
on_source = 'nvim-lspconfig'
on_ft = ['json', 'yaml']

# # rust-tools.nvim
# # Supercharge your Rust experience in Neovim! A heavily modified fork of
# [[plugins]]
# repo = 'mrcjkb/rustaceanvim'
# on_ft = ['rust']
#

##============================================================================
## Coding
##============================================================================
[[plugins]] # ts-comments.nvim
# Tiny plugin to enhance Neovim's native comments.
repo = 'folke/ts-comments.nvim'
on_event = ['BufReadPre', 'BufNewFile', 'CursorHold', 'CursorHoldI']
lua_source = '''
require("ts-comments").setup {}
'''

[[plugins]] # dial.nvim
# Enhanced increment/decrement plugin for Neovim.
repo = 'monaqa/dial.nvim'
on_lua = ['dial']
on_cmd = ['DialDecrement', 'DialIncrement']
hooks_file = '$DPP_HOOKS_DIR/dial.lua'

[[plugins]] # mini.ai (mini.nvim)
repo = 'echasnovski/mini.ai'
depends = ['nvim-treesitter', 'nvim-treesitter-textobjects']
on_event = ['ModeChanged']
hooks_file = '$DPP_HOOKS_DIR/mini/ai.lua'

[[plugins]] # mini.surround (mini.nvim)
repo = 'echasnovski/mini.surround'
on_map = { nv = 'gs' }
hooks_file = '$DPP_HOOKS_DIR/mini/surround.lua'

[[plugins]] # nvim-insx
repo = 'hrsh7th/nvim-insx'
on_event = ['InsertEnter', 'CmdlineEnter']
hooks_file = '$DPP_HOOKS_DIR/nvim-insx.lua'

[[plugins]] # terminal.nvim
repo = 'rebelot/terminal.nvim'
on_event = ['TermOpen']
on_cmd = ['TermOpen', 'TermToggle', 'TermRun', 'Lazygit', 'IPython', 'Htop']
on_lua = ['terminal']
hooks_file = '$DPP_HOOKS_DIR/terminal.lua'

##==============================================================================
## Git
##==============================================================================
[[plugins]] # gitsigns.nvim
# Git indicator for buffers
repo = 'lewis6991/gitsigns.nvim'
on_event = ['BufReadPre', 'BufNewFile']
hooks_file = '$DPP_HOOKS_DIR/gitsigns.lua'

#==============================================================================
# Navigation
#==============================================================================
[[plugins]] # smart-splits.nvim
# Smart, seamless, directional navigation and resizing of Neovim + terminal
# multiplexer splits. Supports tmux, Wezterm, and Kitty.
repo = 'mrjones2014/smart-splits.nvim'
on_lua = ['smart-splits']
hooks_file = '$DPP_HOOKS_DIR/smart-splits.lua'

[[plugins]] # oil.nvim
# Neovim file explorer: edit your filesystem like a buffer
repo = 'stevearc/oil.nvim'
on_lua = 'oil'
hooks_file = '$DPP_HOOKS_DIR/oil.lua'


#==============================================================================
# UI
#==============================================================================
# [[plugins]] # cmdline.vim
# # Display command line text in floating window
# repo = 'Shougo/cmdline.vim'
# on_event = ['CmdlineEnter']
# on_func = ['cmdline#enable', 'cmdline#input']
# hooks_file = '$DPP_HOOKS_DIR/cmdline.lua'

[[plugins]] # ccc.nvim
# Color picker and highlighter plugin for Neovim.
repo = 'uga-rosa/ccc.nvim'
on_event = ['BufNewFile', 'BufReadPost']
hooks_file = '$DPP_HOOKS_DIR/ccc.lua'

[[plugins]] # mini.icons (mini.nvim)
# Icon providers.
repo = 'echasnovski/mini.icons'
on_event = ['BufNewFile', 'BufReadPost']
on_lua = 'mini.icons'
hooks_file = '$DPP_HOOKS_DIR/mini/icons.lua'

[[plugins]] # mini.indentscope (mini.nvim)
repo = 'echasnovski/mini.indentscope'
on_event = ['BufReadPost', 'BufNewFile']
hooks_file = '$DPP_HOOKS_DIR/mini/indentscope.lua'

[[plugins]] # nvim-navic
repo = 'SmiteshP/nvim-navic'
on_source = 'nvim-lspconfig'
on_lua = 'nvim-navic'
hooks_file = '$DPP_HOOKS_DIR/nvim-navic.lua'

[[plugins]] # nui.nvim
repo = 'MunifTanjim/nui.nvim'
on_lua = 'nui'

[[plugins]] # nvim-notify
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
# on_event = ['BufRead']
hooks_file = '$DPP_HOOKS_DIR/nvim-notify.lua'

[[plugins]] # noice.nvim
repo = 'folke/noice.nvim'
on_lua = 'noice'
on_event = ['BufReadPre', 'BufNewFile', 'CursorHold', 'CursorHoldI']
depends = ["nui.nvim", "nvim-notify"]
hooks_file = '$DPP_HOOKS_DIR/noice.lua'

[[plugins]] # which-key.nvim
# Create key bindings that stick. WhichKey helps you remember your Neovim
# keymaps, by showing available keybindings in a popup as you type.
repo = 'folke/which-key.nvim'
on_event = ['UIEnter']
on_cmd = ['WhichKey']
on_lua = ['which-key']
hooks_file = '$DPP_HOOKS_DIR/which-key.lua'

[[plugins]] # heirline.nvim
# Statusline / Bufferline / Statuscolumn / Winbar
repo = 'rebelot/heirline.nvim'
depends = ['gitsigns.nvim', 'terminal.nvim', 'nvim-navic']
on_event = ['BufNewFile', 'BufReadPost']
hooks_file = '$DPP_HOOKS_DIR/heirline.lua'

