# === Plugins (lazy loading) ===
#==============================================================================
# Fundamental
#==============================================================================
# plenary: full; complete; entire; absolute; unqualified.
[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_lua = 'plenary'

# An implementation of the popup API from vim in Neovim. Hope to upstream when complete.
[[plugins]]
repo = 'nvim-lua/popup.nvim'
depends = ['plenary.nvim']
on_lua = 'popup'

# Add icons in (Neo)Vim
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
on_lua = 'nvim-web-devicons'
hook_source = 'lua require("nvim-web-devicons").setup { default = true }'

#==============================================================================
# Treesitter
#==============================================================================
# Nvim Treesitter configurations and abstraction layer
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = 'lua require("rc.config.treesitter")'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-refactor'
on_source = ['nvim-treesitter']

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = ['nvim-treesitter']

[[plugins]]
repo = 'nvim-treesitter/playground'
on_source = ['nvim-treesitter']

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
on_source = ['nvim-treesitter']

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
on_source = ['nvim-treesitter']

[[plugins]]
repo = 'David-Kunz/treesitter-unit'
on_source = ['nvim-treesitter']

#==============================================================================
# Language server protocol (LSP)
#==============================================================================
# Quickstart configurations for the Nvim LSP client.
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufReadPre'
hook_source = 'lua require("rc.config.lsp")'

# Neovim plugin that allows you to seamlessly install LSP servers locally
# (inside :echo stdpath("data")).
[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
rev = 'main'
on_source = ['nvim-lspconfig']

# Use Neovim as a language server to inject LSP diagnostics, code actions, and
# more via Lua.
[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
depends = ['plenary.nvim', 'popup.nvim']
on_source = ['nvim-lspconfig']

# Tools for better development in rust using neovim's builtin lsp.
[[plugins]]
repo = 'simrat39/rust-tools.nvim'
depends = ['plenary.nvim', 'popup.nvim']
on_source = ['nvim-lspconfig']

# Clangd's off-spec features for neovim's LSP client.
[[plugins]]
repo = 'p00f/clangd_extensions.nvim'
on_source = ['nvim-lspconfig']

# A pretty list for showing diagnostics, references, telescope results,
# quickfix and location lists to help you solve all the trouble your code is
# causing.
[[plugins]]
repo = 'folke/trouble.nvim'
depends = ['nvim-web-devicons']
on_cmd = ['TroubleToggle', 'Trouble']
hook_source = 'lua require("trouble").setup()'

# Standalone UI for nvim-lsp progress. Eye candy for the impatient.
[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = ['nvim-lspconfig']
hook_source = 'lua require("fidget").setup()'

#==============================================================================
# Debug Adaptor Protocol (DAP)
#==============================================================================
# Debug Adapter Protocol client implementation for Neovim
[[plugins]]
repo = 'mfussenegger/nvim-dap'
on_lua = ['dap']
hook_add = 'lua require("rc.config.dap").setup()'
hook_source = 'lua require("rc.config.dap").config()'

[[plugins]]
repo ='mfussenegger/nvim-dap-python'
on_source = ['nvim-dap']

[[plugins]]
repo ='theHamsta/nvim-dap-virtual-text'
on_source = ['nvim-dap']

# A UI for nvim-dap
[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
on_lua = 'dapui'
on_source = ['nvim-dap']

#==============================================================================
# Interfaces
#==============================================================================
# A snazzy bufferline for Neovim
[[plugins]]
repo = 'akinsho/nvim-bufferline.lua'
depends = ['nvim-web-devicons']
on_event = 'BufReadPre'
hook_source = '''
lua require("bufferline").setup { options = { always_show_bufferline = true } }
'''
# A fancy, configurable, notification manager for Neovim
[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'

# A high-performance color highlighter for NeoVim
# [[plugins]]
# repo = 'norcalli/nvim-colorizer.lua'
# on_event = 'FileType'
# hook_source = 'lua require("rc.config.colorizer").config()'

# Better quickfix windowin Neovim, polish old quickfix window
[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
rev = 'main'
on_ft = ['qf']

# Indent guides for Neovim
[[plugins]]
repo =  'lukas-reineke/indent-blankline.nvim'
depends = ['nvim-treesitter']
on_event = ['CursorHold', 'FocusLost']
hook_source = 'lua require("rc.config.indent_blankline")'

# Git signs written in pure lua
[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
rev = 'main'
on_event = ['CursorHold', 'FocusLost']
depends = ['plenary.nvim']
hook_source = 'lua require("rc.config.gitsigns")'

# Smart and powerful comments plugin for neovim.
[[plugins]]
repo = 'numToStr/Comment.nvim'
on_map = { n = ['gc', 'gb', 'gcc', 'gbc'], x = ['gc', 'gb'] }
depends = ['nvim-treesitter', 'nvim-ts-context-commentstring']
hook_source = 'lua require("rc.config.comment")'

# A tree like view for symbols in Neovim using the Language Server Protocol.
repo = 'simrat39/symbols-outline.nvim'
on_lua = 'symbols-outline'
on_cmd = ['SymbolsOutline', 'SymbolsOutlineOpen', 'SymbolsOutlineClose']
hook_add = 'lua require("rc.config.symbols_outline").setup()'

#==============================================================================
# Navigation
#==============================================================================
[[plugins]]
repo = 'aserowy/tmux.nvim'
on_lua = 'tmux'
hook_add = 'lua require("rc.config.tmux").setup()'
hook_source = 'lua require("rc.config.tmux").config()'

# Neovim motions on speed!
[[plugins]]
repo = 'phaazon/hop.nvim'
on_lua = 'hop'
hook_add = 'lua require("rc.config.hop").setup()'
hook_source = 'lua require("rc.config.hop").config()'

#==============================================================================
# Editor
#==============================================================================

# The killring-alike plugin with no default mappings.
# (Use this plugin until https://github.com/neovim/neovim/issues/1822 is fixed)
[[plugins]]
repo = 'bfredl/nvim-miniyank'
on_map = { n = '<Plug>' }
hook_add = '''
let g:miniyank_maxitems = 100
nmap p  <Plug>(miniyank-autoput)
nmap P  <Plug>(miniyank-autoPut)
'''

# Make blockwise visual mode more useful
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = { x = '<Plug>' }
hook_add = '''
let g:niceblock_no_default_key_mappings = 1
xmap I  <Plug>(niceblock-I)
xmap A  <Plug>(niceblock-A)
'''

# Operator to replace text with register content
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
on_map = { nx = '<Plug>' }
hook_add = '''
nmap _  <Plug>(operator-replace)
xmap _  <Plug>(operator-replace)
'''
# Set of operators and textobjects to search/select/edit sandwiched texts.
[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = ['nox', '<Plug>(sandwich-', '<Plug>(operator-sandwich-', '<Plug>(textobj-sandwich-']
hook_add = 'lua require("rc.config.vim-sandwich").setup()'
hook_source = 'lua require("rc.config.vim-sandwich").config()'

# Smart align
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign', 'LiveEasyAlign']
on_map = { nv = '<Plug>(EasyAlign)' }
hook_add = 'lua require("rc.config.vim-easy-align").setup()'
hook_source = 'lua require("rc.config.vim-easy-align").config()'

# Perform the replacement in quickfix
[[plugins]]
repo = 'thinca/vim-qfreplace',
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
nnoremap <buffer> R  <Cmd>Qfreplace<CR>
'''

#==============================================================================
# Commands
#==============================================================================
# Breakdown Vim's --startuptime output
[[plugins]]
repo = 'tweekmonster/startuptime.vim'
on_cmd = ['StartupTime']

#==============================================================================
# VCS (Git)
#==============================================================================
# Calling LazyGit from within neovim
[[plugins]]
repo = 'kdheepak/lazygit.nvim'
on_cmd = ['LazyGit', 'LazyGitFilter', 'LazyGitConfig']
hood_add = 'lua require("rc.config.lazygit").setup()'

# Reveal the commit messages under the cursor
[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = ['GitMessenger']
on_map = { n = '<Plug>(git-messenger' }
hook_add = '''
let g:git_messenger_no_default_mappings = v:true
nmap <silent> <Space>gm  <Plug>(git-messenger)
'''

# More pleasant editing on commit messsages.
[[plugins]]
repo = 'rhysd/committia.vim'
on_ft = ['gitcommit']
hook_add = '''
let g:committia_min_window_width = 100
'''

# A lua neovim plugin to generate shareable file permalinks (with line ranges)
# for several git web frontend hosts. Inspired by tpope/vim-fugitive's :GBrowse.
[[plugins]]
repo =  'ruifm/gitlinker.nvim'
depends = ['plenary.nvim']
on_lua = 'gitlinker'
hook_add = 'lua require("rc.config.gitlinker").setup()'
hook_source = 'lua require("rc.config.gitlinker").config()'

#=============================================================================
# Filetypes, Syntax
#==============================================================================
# LaTeX
# [[plugins]]
# repo = 'lervag/vimtex'
# on_ft = 'tex'
# hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/vimtex.vim'

[[plugins]]
repo = 'raimon49/requirements.txt.vim'
on_ft = 'requirements'

# CSV
[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'

# Markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_math = 1
let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']
on_cmd = ['MakeTable', 'UnmakeTable']

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# Hex editor
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
let g:vinarise_enable_auto_detect = 1
'''
