##
## ~/.tmux.conf
##
## The configuration file for Terminal MUltipleXer (tmux)
##

#
# NOTE:
#
#   | command           | alias  |
#   |-------------------+--------|
#   | set-option        | set    |
#   | set-window-option | setw   |
#   | bind-key          | bind   |
#   | unbind-key        | unbind |
#   | if-shell          | if     |
#   | run-shell         | run    |
#

#=============================
# General settings
#=============================

# Prefix key --- <C-z> [default: <C-b>]
set-option -g  prefix C-z
unbind-key C-b
# map prefix + prefix to send prefix key to terminal
bind-key   C-z send-prefix

# Default termtype. If $TERM is set, the value is overwritten.
# set-option -g  default-terminal "screen-256color"
set-option -g  default-terminal "tmux-256color"
# True Color
# set-option -ga terminal-overrides ",xterm-256color:Tc"
set-option -ga terminal-overrides ",alacritty:RGB"
# set-option the number of paste buffer (default: 20)
set-option -g  buffer-limit 50
# Maximum number of lines held in window history (default: 2000)
set-option -g  history-limit 10000

# Escape time in milliseconds (default: 500)
set-option -sg escape-time 20
# Update 'status-left' and 'status-right' every 5 second [default: 15]
set-option -g  status-interval 5
# Display time in milliseconds (default: 750)
set-option -g  display-time 5000
# Display time for the indicator in milliseconds (default: 1000)
set-option -g  display-panes-time 5000

# Enable mouse support
set-option -g  mouse on

# Start index of window/pane with 1 (default: 0)
set-option        -g base-index 1
set-window-option -g pane-base-index 1
# Reset window number when a window is closed.
set-option        -g renumber-windows on
# Disable automatic window renaming
set-window-option -g allow-rename off
# Aggressive window resize
set-window-option -g aggressive-resize on

# # support logging out and back in
# set -g update-environment "SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID_SSH_CONNECTION"

set-option -g focus-events on

#=============================
# Keybindings
#=============================

# Use emacs-like keybindings in tmux command prompt (prefix + :)
set-option -g status-keys emacs
# Use vi-like keybindings in copy mode
set-window-option -g mode-keys vi

# Unbind default keybinds, which are goint to be overritten.
unbind-key %    # split-window -h
unbind-key '"'  # split-window
unbind-key [    # copy-mode
unbind-key ]    # paste-buffer
unbind-key "'"  # select-window
unbind-key n    # next-window
unbind-key p    # previous-window

# Reload the tmux configuration file
bind-key C-r source-file ~/.config/tmux/tmux.conf \;\
  display "[tmux] tmux.conf reloaded!"

# Split panes
bind-key | split-window -h -c "#{pane_current_path}" # horizontal
bind-key - split-window -v -c "#{pane_current_path}" # vertical

# Select windows (prev: 'M-S-[', next: 'M-S-]')
bind-key -n 'M-{' previous-window
bind-key -n 'M-}' next-window

# Select panse (prev: 'M-[', next: 'M-]')
bind-key -n M-[ select-pane -t :.-
bind-key -n M-] select-pane -t :.+

# # Smart pane switching with awareness of Vim splits.
# # See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
# bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
# bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
# bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\\\'  'select-pane -l'"
# bind-key -T copy-mode-vi M-h select-pane -L
# bind-key -T copy-mode-vi M-j select-pane -D
# bind-key -T copy-mode-vi M-k select-pane -U
# bind-key -T copy-mode-vi M-l select-pane -R
# bind-key -T copy-mode-vi 'M-\' select-pane -l

# See: https://github.com/mrjones2014/smart-splits.nvim
#
# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Smart pane switching with awareness of Neovim splits.
bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h'  'select-pane -L'
bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j'  'select-pane -D'
bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k'  'select-pane -U'
bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
# bind-key -n M-h if -F '#{@pane-is-vim}' { send-keys C-h } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
# bind-key -n M-j if -F '#{@pane-is-vim}' { send-keys C-j } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n M-k if -F '#{@pane-is-vim}' { send-keys C-k } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
# bind-key -n M-l if -F '#{@pane-is-vim}' { send-keys C-l } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n C-M-h if -F "#{@pane-is-vim}" 'send-keys C-M-h' 'resize-pane -L 3'
bind-key -n C-M-j if -F "#{@pane-is-vim}" 'send-keys C-M-j' 'resize-pane -D 3'
bind-key -n C-M-k if -F "#{@pane-is-vim}" 'send-keys C-M-k' 'resize-pane -U 3'
bind-key -n C-M-l if -F "#{@pane-is-vim}" 'send-keys C-M-l' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-\' select-pane -l

# for Mac OSX (make pbcopy/pbpaste and Vim's * register work.)
if-shell -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' \
  'set-option -g default-command "reattach-to-user-namespace -l $SHELL";'

# prefix + space to enter copy mode
bind-key Space copy-mode
# prefix + p to paste selection
bind-key p     paste-buffer

# --- Keybindings in copy-mode-vi
# unbind default bindings
unbind-key -T copy-mode-vi Enter  # send-keys -X copy-selection-and-cancel

# prefix + v to begin selection
bind-key -T copy-mode-vi  v send-keys -X begin-selection

yank="~/.config/tmux/clipboard-copy.sh"
# prefix + y: copy selected region
bind-key -T copy-mode-vi  y send-keys -X copy-pipe-and-cancel "$yank"
# prefix + Y: copy current line
bind-key -T copy-mode-vi  Y send-keys -X copy-line \;\
  run "tmux save-buffer - | $yank"
# prefix + D: copy from the cursor position to end of line
bind-key -T copy-mode-vi  D send-keys -X copy-end-of-line \;\
  run "tmux save-buffer - | $yank"
# prefix + A: append the selected region to clipboard
bind-key -T copy-mode-vi  A send-keys -X append-selection-and-cancel \;\
  run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to
# "2" [default: 5 rows per tick].
bind-key -T copy-mode-vi WheelUpPane   select-pane \; send-keys -X -N 2 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down

#=============================
# Appearance
#=============================
# icons
icon_attr="#[nobold,nounderscore,noitalics]"
divider_left="${icon_attr}"
subdivider_left="${icon_attr}"
divider_right="${icon_attr}"
subdivider_right="${icon_attr}"
clock_icon=""
session_icon="❐"
host_icon=""

# --- Window mode
set-option -g mode-style    "fg=default,bg=magenta"

# --- Command line (message)
set-option -g message-style "fg=black,bg=brightyellow"

# --- Window status
set-window-option -g window-status-separator ""

win_separator0="#[fg=black,bg=black]$divider_left"
win_separator1="#[fg=black,bg=cyan]$divider_left"
win_separator2="#[fg=cyan,bg=black]$divider_left"
set-window-option -g window-status-format \
  "$win_separator0#[fg=white,bg=black] #I $subdivider_left #W $win_separator0"
set-window-option -g window-status-current-format \
  "$win_separator1#[fg=black,bg=cyan] #I $subdivider_left#[fg=black,bg=cyan] #W $win_separator2"

# style for windows with activity alert
set-window-option -g window-status-activity-style "fg=yellow"

# --- Pane border
set-window-option -g pane-border-lines        "heavy"
set-window-option -g pane-border-style        "fg=white"
set-window-option -g pane-active-border-style "fg=white"

set-option -g display-panes-colour        "brightblue"
set-option -g display-panes-active-colour "brightyellow"

# --- Status line
set-option -g status on
set-option -g status-position top
set-option -g status-justify  left
set-option -g status-left-length  100
set-option -g status-right-length 100

set-option -g status-style "fg=brightblack,bg=black"

# left status line
status_separator_fg="#{?client_prefix,#[fg=brightblue],#{?pane_in_mode,#{?selection_present,#[fg=magenta],#[fg=yellow]},}}$divider_left"
status_separator_bg="#{?client_prefix,#[bg=brightblue],#{?pane_in_mode,#{?selection_present,#[bg=magenta],#[bg=yellow]},}}$divider_left"
status_mode="#[fg=black]#[bg=brightgreen]#{?client_prefix,#[bg=brightblue] PREFIX ,#{?pane_in_mode,#{?selection_present,#[bg=magenta] VISUAL ,#[bg=yellow] COPY }, DEFAULT }}"
widget_session="#[fg=black,bg=brightwhite]#{?client_readonly,#[fg=white]#[bg=red],} $session_icon #S #[fg=brightwhite,bg=brightgreen]#{?client_readonly,#[fg=red],}$status_separator_bg"
widget_tmux_status="${status_mode}#[fg=brightgreen]#[bg=black]$status_separator_fg"
set-option -g status-left "${widget_session}${widget_tmux_status}"

# Right status line
#   CPU and memory usage:
#   run $(npm install -g tmux-mem tmux-cpu) to install tools
# widget_mem="#[fg=white,bg=black] $subdivider_right #(tmux-mem --format='#[fg=:color,bg=black] MEM: :percent') "
# widget_cpu="#[fg=white,bg=black] $subdivider_right #(tmux-cpu --format='#[fg=:color,bg=black] CPU: :percent') "
# time
widget_time="#[fg=white,bg=black]${divider_right}#[fg=black,bg=white] ${clock_icon} %Y-%m-%d %H:%M"
widget_host="#[fg=green,bg=white]${divider_right}#[fg=black,bg=green] ${host_icon} #h"
widget_right_end="#[fg=brightyellow,bg=green]${divider_right}#[fg=brightred,bg=brightyellow]${divider_right}"
# set-option -g status-right "${widget_cpu} ${widget_mem} ${widget_time} ${widget_host} ${widget_right_end}"
set-option -g status-right "${widget_time} ${widget_host} ${widget_right_end}"

# set -g mode-style "fg=#719cd6,bg=#3b4261"
# set -g message-style "fg=#719cd6,bg=#3b4261"
# set -g message-command-style "fg=#719cd6,bg=#3b4261"
# set -g pane-border-style "fg=#3b4261"
# set -g pane-active-border-style "fg=#719cd6"
# set -g status "on"
# set -g status-justify "left"
# set -g status-style "fg=#719cd6,bg=#131A24"
# set -g status-left-length "100"
# set -g status-right-length "100"
# set -g status-left-style NONE
# set -g status-right-style NONE
# set -g status-left "#[fg=#393b44,bg=#719cd6,bold] #S #[fg=#719cd6,bg=#131A24,nobold,nounderscore,noitalics]"
# set -g status-right "#[fg=#131A24,bg=#131A24,nobold,nounderscore,noitalics]#[fg=#719cd6,bg=#131A24] #{prefix_highlight} #[fg=#3b4261,bg=#131A24,nobold,nounderscore,noitalics]#[fg=#719cd6,bg=#3b4261] %Y-%m-%d  %I:%M %p #[fg=#719cd6,bg=#3b4261,nobold,nounderscore,noitalics]#[fg=#393b44,bg=#719cd6,bold] #h "
# setw -g window-status-activity-style "underscore,fg=#A4A5A6,bg=#131A24"
# setw -g window-status-separator ""
# setw -g window-status-style "NONE,fg=#A4A5A6,bg=#131A24"
# setw -g window-status-format "#[fg=#131A24,bg=#131A24,nobold,nounderscore,noitalics]#[default] #I  #W #F #[fg=#131A24,bg=#131A24,nobold,nounderscore,noitalics]"
# setw -g window-status-current-format "#[fg=#131A24,bg=#3b4261,nobold,nounderscore,noitalics]#[fg=#719cd6,bg=#3b4261,bold] #I  #W #F #[fg=#3b4261,bg=#131A24,nobold,nounderscore,noitalics]"

#============================
# Plugins
#============================
# # Location of Tmux plugin
# set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.config/tmux/plugins'
# # List of plugins
# set-option -g @tpm_plugins '            \
#     tmux-plugins/tpm                    \
#     tmux-plugins/tmux-battery           \
#     tmux-plugins/tmux-open              \
#     tmux-plugins/tmux-prefix-highlight  \
#     samoshkin/tmux-plugin-sysstat       \
# '
#
# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run-shell '~/.config/tmux/plugins/tpm/tpm'
